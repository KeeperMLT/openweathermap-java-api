apply plugin: "idea"
apply plugin: "java"
apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "jacoco"

version "1.0"
group "org.openweathermap"
sourceCompatibility = JavaVersion.VERSION_1_7

ext {
    sourceEncoding = "UTF-8"
    buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    sharedManifest = manifest {
        attributes(
                "Implementation-Title": "OpenWeatherMap Java API",
                "Implementation-Version": version,
                "Build-Time": buildTime
        )
    }
}

repositories {
    mavenCentral()
}
repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenLocal()
}
dependencies {
    compile "com.google.code.gson:gson:2.6.2"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.projectlombok:lombok:1.16.8"
    testCompile "org.codehaus.groovy:groovy-all:2.4.6"
    testCompile "junit:junit:4.12"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude module: "junit"
        exclude module: "groovy-all"
    }
    testCompile "cglib:cglib-nodep:3.2.0"
    testCompile "org.objenesis:objenesis:2.2"
    testCompile "software.betamax:betamax-junit:2.0.0-SNAPSHOT"
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

test {
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PROTECTED
    classpath = configurations.compile
}
//create a single Jar with all dependencies
task generateOneJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(Jar) { // includes War and Ear
    manifest = project.manifest {
        from sharedManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

tasks.withType(JavaCompile.class) {
    options.deprecation = false
    options.warnings = false
    options.encoding = sourceEncoding
    options.compilerArgs = ["-Xmaxerrs", "20", "-Xmaxwarns", "0", "-Xlint:all"]
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}